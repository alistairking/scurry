// Code generated by "enumer -type=MeasurementType -json -text -linecomment"; DO NOT EDIT.

//
package scurry

import (
	"encoding/json"
	"fmt"
)

const _MeasurementTypeName = "unknownpingtrace"

var _MeasurementTypeIndex = [...]uint8{0, 7, 11, 16}

func (i MeasurementType) String() string {
	if i < 0 || i >= MeasurementType(len(_MeasurementTypeIndex)-1) {
		return fmt.Sprintf("MeasurementType(%d)", i)
	}
	return _MeasurementTypeName[_MeasurementTypeIndex[i]:_MeasurementTypeIndex[i+1]]
}

var _MeasurementTypeValues = []MeasurementType{0, 1, 2}

var _MeasurementTypeNameToValueMap = map[string]MeasurementType{
	_MeasurementTypeName[0:7]:   0,
	_MeasurementTypeName[7:11]:  1,
	_MeasurementTypeName[11:16]: 2,
}

// MeasurementTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MeasurementTypeString(s string) (MeasurementType, error) {
	if val, ok := _MeasurementTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MeasurementType values", s)
}

// MeasurementTypeValues returns all values of the enum
func MeasurementTypeValues() []MeasurementType {
	return _MeasurementTypeValues
}

// IsAMeasurementType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MeasurementType) IsAMeasurementType() bool {
	for _, v := range _MeasurementTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MeasurementType
func (i MeasurementType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MeasurementType
func (i *MeasurementType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MeasurementType should be a string, got %s", data)
	}

	var err error
	*i, err = MeasurementTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for MeasurementType
func (i MeasurementType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for MeasurementType
func (i *MeasurementType) UnmarshalText(text []byte) error {
	var err error
	*i, err = MeasurementTypeString(string(text))
	return err
}
